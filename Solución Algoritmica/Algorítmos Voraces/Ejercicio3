#UNIVERSIDAD DE LAS FUERZAS ARMADAS "ESPE"
#INTEGRANTES: CARRIEL PAMELA, ORTIZ BRYAN, PAREDES CAMILA
#NRC: 9898
#FECHA: 21/07/2023
class DisjointSet:
    def __init__(self, n):
        self.parent = [i for i in range(n)]

    def find(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            self.parent[root_y] = root_x

def kruskal(graph):
    graph.sort(key=lambda x: x[2])  # Ordenar las aristas por peso
    num_nodes = len(set([x for edge in graph for x in edge[:2]]))
    disjoint_set = DisjointSet(num_nodes)
    minimum_spanning_tree = []

    for edge in graph:
        node1, node2, weight = edge
        if disjoint_set.find(node1) != disjoint_set.find(node2):
            disjoint_set.union(node1, node2)
            minimum_spanning_tree.append((node1, node2, weight))

    return minimum_spanning_tree

# Ejemplo de uso:
graph = [(0, 1, 4), (0, 7, 8), (1, 2, 8), (1, 7, 11), (2, 3, 7), (2, 8, 2),
         (2, 5, 4), (3, 4, 9), (3, 5, 14), (4, 5, 10), (5, 6, 2), (6, 7, 1),
         (6, 8, 6), (7, 8, 7)]
minimum_spanning_tree = kruskal(graph)
print("Árbol de expansión mínima:", minimum_spanning_tree)
